{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","task","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","preventDefault","createTodo","objectSpread","id","uuid","react_default","a","createElement","onSubmit","className","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleClick","showForm","handleUpdate","removeTodo","updateTodo","onClick","class","TodoList","todos","create","remove","update","filter","t","newTodo","concat","toConsumableArray","newTask","updatedTodos","map","todo","_this2","src_Todo","key","src_TodoForm","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.163f70a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport uuid from 'uuid'\nimport './NewTodoForm.css'\n\nclass TodoForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = { task: \"\" }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(e){\n        this.setState({\n            [e.target.name]: e.target.value //Computed property\n        })\n    }\n\n    handleSubmit(e){\n        e.preventDefault()\n        this.props.createTodo({...this.state, id: uuid() })\n        this.setState({task: \"\"})\n    }\n\n    //Call it, then create it\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit} className=\"NewTodoForm\">\n                    <label htmlFor=\"task\">Enter a new to-do item</label>\n                    <input \n                        type=\"text\" \n                        placeholder=\"New to do\" \n                        id=\"task\"\n                        value = {this.state.task}\n                        onChange = {this.handleChange}\n                        name=\"task\"\n                        />\n                        <button>Add To-do</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default TodoForm","import React, { Component } from 'react'\n\nclass Todo extends Component {\n    constructor(props){\n        super(props)\n        this.state = { isEditing: false, task: this.props.task }\n        this.handleClick = this.handleClick.bind(this)\n        this.showForm = this.showForm.bind(this)\n        this.handleUpdate = this.handleUpdate.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleClick(){\n        return this.props.removeTodo(this.props.id)\n    }\n\n    showForm(){\n        this.setState({isEditing: !this.state.isEditing})\n    }\n\n    handleUpdate(e){\n        e.preventDefault()\n        this.props.updateTodo(this.props.id, this.state.task)\n        this.setState({isEditing: !this.state.isEditing})\n    }\n\n    handleChange(e){\n        this.setState({\n            [e.target.name]: e.target.value //Computed property\n        })   \n    }\n\n    render() {\n        let result;\n        if(this.state.isEditing){\n            result = \n                <div className=\"Todo\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input type=\"text\" value={this.state.task} name=\"task\" onChange={this.handleChange}/>\n                        <button>Done</button>\n                    </form>\n                </div>\n        }else{\n            result =\n            <div className=\"Todo\">\n                 <p>{this.props.task}</p>\n            <div className=\"Todo-buttons\">\n                <button onClick={this.showForm}><i class=\"fas fa-edit\"></i></button>\n                <button onClick={this.handleClick}><i class=\"fas fa-trash\"></i></button>\n            </div>\n            </div>\n        }\n\n        return result\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\nimport './TodoList.css'\nimport './Todo.css'\n\nclass TodoList extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            todos: []\n        }\n        this.create = this.create.bind(this)\n        this.remove = this.remove.bind(this)\n        this.update = this.update.bind(this)\n    }\n\n    remove(id){\n        this.setState({\n            todos: this.state.todos.filter(t =>  t.id !== id )\n        })\n    }\n\n    create(newTodo){\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        });\n    }\n\n    update(id, newTask){\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id){\n                return {...todo, task: newTask}\n            }\n            return todo\n        })\n\n        this.setState({todos: updatedTodos})\n    }\n\n    render() {\n        const todos = this.state.todos.map(todo => {\n            return <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove} updateTodo={this.update}/>\n        });\n\n\n        return (\n            <div className=\"TodoList\">\n                <h1>Todo List!<span>Make a plan and execute it</span></h1>\n                <ul>\n                    <TodoForm createTodo = {this.create} removeTodo={this.remove} />\n                    {todos}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default TodoList","import React, { Component } from 'react'\nimport './App.css';\nimport TodoList from './TodoList'\n\nclass App extends Component{\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}